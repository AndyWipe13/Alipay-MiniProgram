"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var props_1 = require("./props");
var value_1 = tslib_1.__importDefault(require("../mixins/value"));
var fmtEvent_1 = tslib_1.__importDefault(require("../_util/fmtEvent"));
Component({
    mixins: [
        (0, value_1.default)({
            transformValue: function (val) {
                var value = val || [];
                return {
                    needUpdate: true,
                    value: value,
                };
            },
        }),
    ],
    props: props_1.SelectorDefaultProps,
    methods: {
        onChange: function (e) {
            var event = (0, fmtEvent_1.default)(this.props);
            var _a = e.currentTarget.dataset, disabled = _a.disabled, value = _a.value;
            var _b = this.props, multiple = _b.multiple, options = _b.options, maxSelectedCount = _b.maxSelectedCount, minSelectedCount = _b.minSelectedCount, onSelectMax = _b.onSelectMax, onSelectMin = _b.onSelectMin, onChange = _b.onChange;
            if (disabled || this.props.disabled) {
                return;
            }
            if (multiple) {
                var currentValue_1 = this.getValue();
                if (currentValue_1.indexOf(value) > -1) {
                    if (!isNaN(maxSelectedCount) &&
                        currentValue_1.length >= maxSelectedCount) {
                        if (onSelectMax) {
                            onSelectMax(value, options.find(function (v) { return v.value === value; }), event);
                        }
                        return;
                    }
                    currentValue_1 = currentValue_1.filter(function (v) { return v !== value; });
                }
                else {
                    if (!isNaN(minSelectedCount) &&
                        currentValue_1.length <= minSelectedCount) {
                        if (onSelectMin) {
                            onSelectMin(value, options.find(function (v) { return v.value === value; }), event);
                        }
                        return;
                    }
                    currentValue_1 = tslib_1.__spreadArray(tslib_1.__spreadArray([], currentValue_1, true), [value], false);
                }
                if (!this.isControlled()) {
                    this.update(currentValue_1);
                }
                if (onChange) {
                    onChange(currentValue_1, options.filter(function (v) { return currentValue_1.indexOf(v.value) > -1; }), (0, fmtEvent_1.default)(this.props));
                }
            }
            else {
                if (value === this.getValue()) {
                    if (minSelectedCount === 1) {
                        if (onSelectMin) {
                            onSelectMin(value, options.find(function (v) { return v.value === value; }), event);
                        }
                        return;
                    }
                    if (!this.isControlled()) {
                        this.update(undefined);
                    }
                    if (onChange) {
                        onChange(undefined, undefined, (0, fmtEvent_1.default)(this.props));
                    }
                }
                else {
                    if (!this.isControlled()) {
                        this.update(value);
                    }
                    if (onChange) {
                        onChange(value, options.find(function (v) { return v.value === value; }), (0, fmtEvent_1.default)(this.props));
                    }
                }
            }
        },
    },
});